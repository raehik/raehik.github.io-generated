<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diaries of a Script Kiddie</title>
    <description>Musings and guides on tech with a Linux slant.</description>
    <link>raehik.github.io/</link>
    <atom:link href="raehik.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 08 Dec 2015 22:15:30 +0000</pubDate>
    <lastBuildDate>Tue, 08 Dec 2015 22:15:30 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Creating your own XMB/VSH themes for PSP custom firmware</title>
        <description>&lt;p&gt;The PSP homebrew and hacking scene flourished from the PSP&amp;rsquo;s release up until
2011, when it was phased out and replaced with the PS Vita. Since then, a lot of
the guides and tutorials that used to be available have been lost. Now it&amp;rsquo;s hard
to find detailed guides for homebrew apps and such things, and the few that I
managed to find were often for older or outdated versions. So I worked on a
personal guide for something I wanted to do, and this is the result. It&amp;rsquo;s a long
tutorial and I didn&amp;rsquo;t edit it further, so it&amp;rsquo;s not the easiest read &amp;ndash; consider
yourself warned. Regardless, here&amp;rsquo;s how to create a CTF &lt;em&gt;from scratch&lt;/em&gt; and
&lt;strong&gt;&lt;em&gt;using a Linux distro&lt;/em&gt;&lt;/strong&gt; for usage with CXMB.&lt;/p&gt;

&lt;p&gt;The PSP&amp;rsquo;s main menu (called XMB for &amp;lsquo;XrossMediaBar&amp;rsquo;) is customisable. Sony
allowed users to create their own themes and share them, but only icons could be
changed. With CFW people have been able to access the PSP&amp;rsquo;s flash memory and
overwrite the resource files to change more things including gameboots, sound
effects and lots more. This page is intended to be a &lt;strong&gt;full guide to all things
PSP theming for Linux systems&lt;/strong&gt; (even though most programs required are
Windows&amp;hellip;).&lt;/p&gt;

&lt;h2 id=&quot;definitions&quot;&gt;Definitions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PTF:&lt;/strong&gt; PSP theme file (I&amp;rsquo;m assuming that&amp;rsquo;s the abbreviation) generated by
Sony&amp;rsquo;s Custom Theme Converter. Can change icons and wallpapers, and that&amp;rsquo;s
pretty much it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CTF:&lt;/strong&gt; Custom theme file (again, assumed). Used by CXMB to override
resource files stored in the PSP&amp;rsquo;s flash memory (flash0), without you having
to do it manually.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RCO:&lt;/strong&gt; Resource files stored in flash0 which contain various resources
including&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VAG:&lt;/strong&gt; Sony&amp;rsquo;s own audio codec, compressed sound format used in the PSX.
The PSP uses VAG files for its cursor sounds and other XMB sound effects.
Note that you &lt;em&gt;can&lt;/em&gt; use both mono and stereo VAG sounds &amp;ndash; just that some
people suggest against it, perhaps due to space considerations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XMB:&lt;/strong&gt; Sony&amp;rsquo;s XrossMediaBar, the interface used in the PSP, PS3, Sony
Bravia and maybe a few more Sony products. Can be customised to an extent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CXMB:&lt;/strong&gt; Homebrew VSH plugin which allows changing more XMB elements
including sounds and icon layouts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VSH:&lt;/strong&gt; The XMB internally? Not really sure. According to &lt;a href=&quot;http://psp-handheld.blogspot.co.uk/2011/05/ctf-tool-gui-v44-create-extract-and.html&quot;&gt;PSP
handheld&lt;/a&gt;, &lt;em&gt;&amp;ldquo;The XMB on the PSP is known internally as the
&amp;#39;VSH&amp;rsquo;&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overview-of-the-ctf-creation-process&quot;&gt;Overview of the CTF creation process&lt;/h2&gt;

&lt;p&gt;To make a CTF (including sounds) &lt;em&gt;from scratch&lt;/em&gt;, you&amp;rsquo;d do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a PTF with Custom Theme Converter

&lt;ul&gt;
&lt;li&gt;This is where you choose icons for things.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Obtain and decrypt your PSP&amp;rsquo;s RCOs

&lt;ul&gt;
&lt;li&gt;Requires ME CFW for the LEDA plugin to make Resurssiklunssi work&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Convert sound effects into VAG sound files with MFAudio&lt;/li&gt;
&lt;li&gt;Replace any sounds in the RCOs that you want to override using RCO Editor&lt;/li&gt;
&lt;li&gt;[ Do any other CTF things you like (menu placement &amp;amp; other cool things) ]&lt;/li&gt;
&lt;li&gt;Create a CTF from the PTF and RCOs using CTFtool GUI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, a more streamlined list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change base PTF and export (Custom Theme Converter)&lt;/li&gt;
&lt;li&gt;Convert some WAVs into VAGs (MFAudio)&lt;/li&gt;
&lt;li&gt;Make a copy of the RCO you are replacing VAGs in and do it (RCO Editor)&lt;/li&gt;
&lt;li&gt;Create a CTF from the PTF and any RCOs (CTFtool GUI)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I&amp;rsquo;ll cover each of those steps.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-ptf-using-custom-theme-converter&quot;&gt;Creating a PTF using Custom Theme Converter&lt;/h3&gt;

&lt;p&gt;Sony kept their Custom Theme Converter updated &amp;#39;til the end: the final version
v1.6 works with 6.60 and below. (TODO: what about 6.61?)&lt;/p&gt;

&lt;p&gt;Every PTF theme must have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title (string)&lt;/li&gt;
&lt;li&gt;Product ID (string)&lt;/li&gt;
&lt;li&gt;Version (integer/float)&lt;/li&gt;
&lt;li&gt;Preview Icon (16x16, 256 colour, PNG/TGA/GIM) &amp;ndash; PNG doesn&amp;rsquo;t work for me, I
use TGA&lt;/li&gt;
&lt;li&gt;Preview Image (300x170, 24 bit colour, BMP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Title/product ID/version don&amp;rsquo;t change a thing, and you don&amp;rsquo;t even get to see
them on the PSP. Preview icon and image are used when selecting a theme.&lt;/p&gt;

&lt;p&gt;For &amp;#39;Preview Icon&amp;rsquo;, using ImageMagick:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;convert &amp;lt;image&amp;gt; -resize &amp;quot;\!16x16&amp;quot; -colors 256 out.tga
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For &amp;#39;Preview Image&amp;rsquo;, using ImageMagick:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;convert &amp;lt;image&amp;gt; -resize &amp;quot;\!300x170&amp;quot; BMP3:out.bmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use BMP3 because imlib2 can&amp;rsquo;t load whatever ImageMagick uses for &lt;code&gt;.bmp&lt;/code&gt; by
default. Both seem to work with Custom Theme Converter.&lt;/p&gt;

&lt;h3 id=&quot;obtaining-your-psp-firmware&amp;#39;s-rcos&quot;&gt;Obtaining your PSP firmware&amp;rsquo;s RCOs&lt;/h3&gt;

&lt;p&gt;This is for ME/PRO CFW, some strings might be different in respective VSH menus.&lt;/p&gt;

&lt;p&gt;Go into the recovery menu (hit Select for the VSH menu), select &amp;#39;Configuration&amp;rsquo;,
and change &amp;#39;XMB USB Device&amp;rsquo; to Flash 0. Then connect to your PC and mount the
disk that shows up (for me it was a plain disk not partitioned):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;$ mkdir tmp
$ mount -o uid=$(id -u),gid=$(id -g),utf8,ro &amp;lt;device&amp;gt; tmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(For some reason I couldn&amp;rsquo;t mount properly to /mnt so I&amp;rsquo;m giving the
instructions I used myself.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The RCOs you want are at &lt;code&gt;vsh/resource&lt;/code&gt;. Copy the whole folder over to your
computer, then change the USB device back to the memory stick.&lt;/p&gt;

&lt;p&gt;Now you need to decompress them using a PSP app, Resurssiklunssi. &lt;em&gt;However&lt;/em&gt;,
that is a 1.50 kernel app, which recent only old PSPs and CFWs can run (I
think). The workaround is to use LEDA, a &amp;#39;legacy software loader&amp;rsquo; which allows
you to run 1.50 kernel homebrew. This only works in ME CFW, so install it if you
haven&amp;rsquo;t, run it, make sure LEDA is enabled in &lt;code&gt;seplugins/game.txt&lt;/code&gt;, and start
Resurssiklunssi. Hit X, then connect back up and copy across the decompressed
file(s).&lt;/p&gt;

&lt;h3 id=&quot;replacing-sounds&quot;&gt;Replacing sounds&lt;/h3&gt;

&lt;p&gt;To change a sound in a CTF theme, you need to replace the sound&amp;rsquo;s VAG file in
its respective RCO file. A lot of basic system sounds like cursor ticks and
confirmations are kept in &lt;code&gt;system_plugin.rco&lt;/code&gt;, so we&amp;rsquo;ll use that as an example.&lt;/p&gt;

&lt;h4 id=&quot;getting-a-wav-file&quot;&gt;Getting a WAV file&lt;/h4&gt;

&lt;p&gt;First you need a short WAV file with a frequency of &lt;strong&gt;44.1kHz&lt;/strong&gt; and &lt;strong&gt;16 bit&lt;/strong&gt;
depth. Usually, I&amp;rsquo;d recommend FFmpeg:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;ffmpeg -i &amp;lt;file&amp;gt; -acodec pcm_s16le -ar 44.1k output.wav
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or less-assuredly, using the fact that those options are default for WAV files:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;ffmpeg -i &amp;lt;file&amp;gt; output.wav
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, for some reason this doesn&amp;rsquo;t work. MFAudio complains about it being
an &amp;ldquo;invalid WAV file&amp;rdquo;. Checking in a hex editor, FFmpeg changes the offset and
generally makes more changes than SoX, another media converter (just audio
unlike FFmpeg&amp;rsquo;s A/V capabilities). SoX works fine, however:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;sox &amp;lt;file&amp;gt; output.wav
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I suggest using SoX to make your WAV files.&lt;/p&gt;

&lt;p&gt;Full steps for adding a sound to a CTF theme:&lt;/p&gt;

&lt;p&gt;This should be an overview, each step should be gone into in detail in
subsections.&lt;/p&gt;

&lt;h4 id=&quot;creating-&amp;amp;-replacing-a-vag-file&quot;&gt;Creating &amp;amp; replacing a VAG file&lt;/h4&gt;

&lt;p&gt;VAG (LMAO) files are a Sony compressed audio format. The PSP uses them in the
VSH for sounds. Converting to VAG isn&amp;rsquo;t something most average audio converters
can handle, so we use &lt;strong&gt;MFAudio&lt;/strong&gt; in Wine.&lt;/p&gt;

&lt;p&gt;For output file format, you want &amp;#39;VAG - Sony PSX Sound - Compressed ADPCM&amp;rsquo;.
Stereo or mono is fine, but remember you have &lt;strong&gt;limited space&lt;/strong&gt;, so in most
cases mono will be sufficient. Also, I&amp;rsquo;ve only used mono so far &amp;ndash; you might
have to do something different when replacing the VAG if you make it stereo.&lt;/p&gt;

&lt;p&gt;To replace a VAG with the new one you&amp;rsquo;ve just made, use RCO Editor. It&amp;rsquo;s simple
enough.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-ctf&quot;&gt;Creating the CTF&lt;/h3&gt;

&lt;p&gt;Now we have all the resources and files to create a CTF. CTFtool GUI (goes by
CTF Tool GUI, CTFtool GUI) conveniently lets you make CTFs on your computer
rather than using CXMB to package them, so it&amp;rsquo;s definitely worth spending time
to set up. You&amp;rsquo;ll have to use Wine, but CTFtool GUI plays nice with it, even
though being a little poorly designed on the GUI front messes up some window
functions.&lt;/p&gt;

&lt;p&gt;The thing is, there are &lt;strong&gt;next to no&lt;/strong&gt; guides out there for using CTFtool GUI,
and it requires some certain firmware files to make it produce CTFs for
different firmwares. I eventually found the answer in some thread about another
tool, CTF Manager.&lt;/p&gt;

&lt;p&gt;For every firmware that you want to create CTFs for, you need &lt;strong&gt;3 decrypted
PRXs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;common_gui.prx&lt;/li&gt;
&lt;li&gt;paf.prx&lt;/li&gt;
&lt;li&gt;vshmain.prx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CTFtool GUI comes with what seems like &lt;em&gt;all the main firmware files&lt;/em&gt; for a range
of common firmwares (even though only those 3 should be required). You should be
able to create a theme for 6.61 by decrypting the required PRXs from your PSP
and putting them in the folder &lt;code&gt;base/661&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t panic&lt;/strong&gt; when an error dialog comes up! CTFtool GUI is lying to you!
Every time I make a theme a &amp;ldquo;CTF Package Error&amp;rdquo; dialog box pops up and talks
abuot termination and whatnot. Don&amp;rsquo;t worry, the theme should have been properly
created! Full text of the error for extra help (all spelling/grammar exact):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CTFtool:CTF Package Error, the task termination&lt;/p&gt;

&lt;p&gt;Error No.: 6
Error Description: Overflow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As long as the CTF has been created, it&amp;rsquo;s probably been successful.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;And you&amp;rsquo;re done. Copy the CTF over to &lt;code&gt;ms0:/PSP/THEME&lt;/code&gt; and try it out!&lt;/p&gt;

&lt;h2 id=&quot;cxmb&quot;&gt;CXMB&lt;/h2&gt;

&lt;p&gt;In earlier PSP homebrew times, to change gameboot sounds and cursor SFX you had
to directly access the PSP&amp;rsquo;s flash memory (named flash0) and overwrite certain
resource files. This is dangerous: &lt;a href=&quot;http://endlessparadigm.com/forum/showthread.php?tid=400&quot;&gt;according to ZiNgA BuRgA&lt;/a&gt;,
creator of RCO Editor, &lt;em&gt;&amp;ldquo;it&amp;rsquo;s possible to semi-brick by flashing RCOs&amp;rdquo;&lt;/em&gt;.
&lt;strong&gt;CXMB&lt;/strong&gt; removes the need to do this by enabling you to create and use CTF
themes, which can override VSH resources in flash0 safely.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;To use CXMB, put the &lt;code&gt;cxmb.prx&lt;/code&gt; file in &lt;code&gt;ms0:/cxmb&lt;/code&gt; and add a line to
&lt;code&gt;ms0:/seplugins/vsh.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;ms0:/cxmb/cxmb.prx 1
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;enabling-a-ctf-theme&quot;&gt;Enabling a CTF theme&lt;/h3&gt;

&lt;p&gt;Just go into Theme Settings -&amp;gt; Theme and choose one. CTF themes aren&amp;rsquo;t indicated
specially, so you need to know what it might look like (you don&amp;rsquo;t actually get
shown the theme name).&lt;/p&gt;

&lt;h3 id=&quot;disabling-the-current-ctf-theme&quot;&gt;Disabling the current CTF theme&lt;/h3&gt;

&lt;p&gt;Changing the theme in Theme Settings to a non-CTF theme (i.e. a PTF) will only
change a few features of the theme. Like, it won&amp;rsquo;t properly revert it. If you
want to remove the current CTF theme, delete the config file CXMB generates at
&lt;code&gt;ms0:/cxmb/conf.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;$ mount -o uid=$(id -u),gid=$(id -g),utf8 &amp;lt;device&amp;gt; /mnt
$ rm /mnt/cxmb/conf.txt
$ umount /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then choose the PTF theme you wanted and restart the VSH. Remember that the
wallpaper and colour would have been changed, so you need to reset them if you
choose the default theme or a PTF which doesn&amp;rsquo;t change those.&lt;/p&gt;

&lt;h2 id=&quot;ctftool-gui&quot;&gt;CTFtool GUI&lt;/h2&gt;

&lt;p&gt;To extract resources from &lt;strong&gt;PTFs&lt;/strong&gt;, use the top two fields in the &amp;#39;Extract&amp;rsquo; tab.
For &lt;strong&gt;CTFs&lt;/strong&gt;, use the bottom two fields.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Dec 2015 21:40:54 +0000</pubDate>
        <link>raehik.github.io/2015/12/08/creating-your-own-xmbvsh-themes-for-psp-custom-firmware/</link>
        <guid isPermaLink="true">raehik.github.io/2015/12/08/creating-your-own-xmbvsh-themes-for-psp-custom-firmware/</guid>
        
        
      </item>
    
      <item>
        <title>My blog&#39;s first birthday!</title>
        <description>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;commit 179b52e225f9892f443da38b3e0374bdebe38a80
Author: Ben Orchard &amp;lt;thefirstmuffinman@gmail.com&amp;gt;
Date:   Sat Aug 2 02:20:21 2014 +0100

    initial commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks like my blog will be &lt;strong&gt;1 year old&lt;/strong&gt; in only 2 days! It&amp;rsquo;s a little sad that
I didn&amp;rsquo;t write much content &amp;ndash; but at the same time, it means I was able to work
on many other Jekyll projects, such as my &lt;a href=&quot;https://github.com/raehik/jekyll-wiki-template&quot;&gt;Jekyll wiki
template&lt;/a&gt; and setting up (and
actually using!) a Jekyll journal. Fun times!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve got to get up to some more interesting things so I can write about them. I
spend an awful lot of time &lt;a href=&quot;https://github.com/raehik/scripts&quot;&gt;playing&lt;/a&gt; &lt;a href=&quot;https://github.com/raehik/markdown-render&quot;&gt;with&lt;/a&gt;
&lt;a href=&quot;https://github.com/raehik/new-from-template&quot;&gt;short&lt;/a&gt; &lt;a href=&quot;https://github.com/raehik/jctl&quot;&gt;scripts&lt;/a&gt;, so I don&amp;rsquo;t consider writing about
them. But I could well talk about my wiki template, or a selection of my
scripts (especially &lt;a href=&quot;https://github.com/raehik/scripts/blob/master/file-render&quot;&gt;file-render&lt;/a&gt; and using it in Vim). I don&amp;rsquo;t want to sound
overly enthusiastic and subsequently fall flat before writing anything, so I&amp;rsquo;ll
only tell myself that I have to jump into writing a post rather than thinking
about it as a draft initially.&lt;/p&gt;

&lt;p&gt;Be expecting more posts in the coming 2 weeks! I have some old drafts to fluff
up.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2015 17:15:48 +0100</pubDate>
        <link>raehik.github.io/2015/07/31/my-blogs-first-birthday/</link>
        <guid isPermaLink="true">raehik.github.io/2015/07/31/my-blogs-first-birthday/</guid>
        
        
      </item>
    
      <item>
        <title>Writing a custom Redcarpet renderer</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When I&amp;rsquo;m writing I don&amp;rsquo;t like interrupting my train of thought. It
easily occurs when I decide &amp;ldquo;ooh, this is a nice song, let me Google the
artist&amp;rdquo; or when I&amp;rsquo;m experiencing &lt;a href=&quot;!Wikipedia&quot;&gt;presque vu&lt;/a&gt; and resolve to
find a more fitting word (I had to Google for that word, by the way).
Another of the more irritating issues I&amp;rsquo;ve had is linking to pages in my
writing. I frequently link to two websites in particular,
&lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org&quot;&gt;Wikipedia&lt;/a&gt;.
Having to Google the page I want, click on it, copy the URL and finally
paste it into my terminal is tedious and sometimes I lose focus and end
up browsing the Internet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gwern.net&quot;&gt;Gwern&lt;/a&gt;, a writer I follow who writes extensively in
almost uncountable disciplines, keeps the source for his website in a
GitHub repo at &lt;a href=&quot;!GitHub&quot;&gt;gwern/gwern.net&lt;/a&gt;. By checking a few pages I
learn how he frequently links to &lt;a href=&quot;http://www.gwern.net/haskell/Wikipedia%20Archive%20Bot&quot;&gt;five or more Wikipedia pages in one
sentence&lt;/a&gt;: he doesn&amp;rsquo;t write a URL, instead linking to
&lt;code&gt;(!Wikipedia)&lt;/code&gt;. Clearly there&amp;rsquo;s some clever stuff going on here.&lt;/p&gt;

&lt;p&gt;His &lt;a href=&quot;!GitHub&quot; title=&quot;gwern/gwern.net/blob/master/hakyll.hs&quot;&gt;Hakyll configuration file&lt;/a&gt; has some stuff about so
called &lt;a href=&quot;!GitHub&quot; title=&quot;gwern/gwern.net/blob/master/hakyll.hs#L117&quot;&gt;&amp;lsquo;interwiki links&amp;rsquo;&lt;/a&gt;. The actual processing
happens in &lt;a href=&quot;!GitHub&quot; title=&quot;gwern/gwern.net/blob/master/haskell/interwiki-compile.hs&quot;&gt;haskell/interwiki-compile.hs&lt;/a&gt;, and it&amp;rsquo;s&amp;hellip; pretty
unreadable if you&amp;rsquo;re like me and don&amp;rsquo;t know Haskell. But the abstract
idea is very simple: rather than linking to a page, you specify the
&lt;em&gt;website name&lt;/em&gt; and a &lt;em&gt;query&lt;/em&gt; (e.g. the Wikipedia page on &lt;a href=&quot;!Wikipedia&quot;&gt;Stanley
Kubrick&lt;/a&gt;) and a link to the website with the query is formed
in the HTML. By using this simple short syntax, you can link to pages
much more fluidly and with hardly a second&amp;rsquo;s interruption, though using
non-canonical Markdown syntax. (Then again, if you&amp;rsquo;re using Jekyll, you
likely don&amp;rsquo;t care about that.)&lt;/p&gt;

&lt;p&gt;Gwern &lt;a href=&quot;!GitHub&quot; title=&quot;jgm/gitit/blob/master/plugins/Interwiki.hs&quot;&gt;originally wrote the function&lt;/a&gt; to make it easier
to create links between public &lt;a href=&quot;!Wikipedia&quot; title=&quot;Wiki&quot;&gt;wikis&lt;/a&gt; on the
Internet. I wanted to generalise it further and allow whatever
&amp;#39;interwiki links&amp;rsquo; you wanted. I named these links &lt;strong&gt;shortlinks&lt;/strong&gt; because
hey, they&amp;rsquo;re links but a bit shorter.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Now the question is posed: how to implement shortlink conversion?
I tried writing a &lt;a href=&quot;!GitHub&quot; title=&quot;raehik/mdwiki-preprocess&quot;&gt;Markdown
preprocessor&lt;/a&gt; before and it soon
became clear that I&amp;rsquo;d have to write a full Markdown parser to understand
where not to convert shortlinks. I chose to write a custom Redcarpet
renderer since it&amp;rsquo;s the converter I use for general use (TODO) and
Jekyll. After a bit of reading on the &lt;a href=&quot;!GitHub&quot; title=&quot;vmg/redcarpet&quot;&gt;Redcarpet GitHub
repo&lt;/a&gt; I found it reasonably straightforward how
to create one.&lt;/p&gt;

&lt;p&gt;The specification for my shortlink renderer follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Valid shortlinks begin with an identifier string (I&amp;rsquo;m using Gwern&amp;rsquo;s
&amp;rsquo;!&amp;rsquo;) and exist in the hash which maps website names to URLs.&lt;/li&gt;
&lt;li&gt;Shortlinks are converted to links which combines the query string
with the website URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If possible, I also wanted to implement another feature Gwern&amp;rsquo;s syntax
has, which is that &lt;em&gt;links with an empty link&lt;/em&gt; (i.e. just a title) are
converted to links pointing to the title. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[i/relative-img.png]()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would be treated as&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[i/relative-img.png](i/relative-img.png)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t want to change anything else in the Markdown conversion.&lt;/p&gt;

&lt;p&gt;Redcarpet lets you extend the default renderer, and some impressive Ruby
magic allows you to override only the parts of syntax you want to change
(even though the renderer is written in C). To make a new renderer for
shortlinks, I could write this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;redcarpet&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLWithShortlinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redcarpet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The overridden &lt;code&gt;link&lt;/code&gt; method needs to check the link for a shortlink,
edit the link to form if one is present and return an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag. Pretty
simple!&lt;/p&gt;

&lt;p&gt;The only gripe with overriding Redcarpet&amp;rsquo;s HTML renderer is that you
can&amp;rsquo;t use the original method using &lt;code&gt;super&lt;/code&gt; because, as I mentioned
before, it&amp;rsquo;s written in C with a Ruby API. Luckily in this case it&amp;rsquo;s no
issue, because &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags are simple to form.&lt;/p&gt;

&lt;h2 id=&quot;my-shortlink-renderer&quot;&gt;My shortlink renderer&lt;/h2&gt;

&lt;p&gt;My renderer at &lt;a href=&quot;!GitHub&quot;&gt;raehik/redcarpet-shortlink&lt;/a&gt; does the shortlink
processing and also checks for empty links. I also copied the rest of
Gwern&amp;rsquo;s features such as forming a title for shortlinks and letting you
choose a custom query by setting a title for the shortlink. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[raehik/redcarpet-shortlink](!GitHub)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would become&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/raehik/redcarpet-shortlink&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GitHub: raehik/redcarpet-shortlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;raehik/redcarpet-shortlink&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;while&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;[My shortlink renderer](!GitHub &amp;quot;raehik/redcarpet-shortlink&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is converted to&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://github.com/raehik/redcarpet-shortlink&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GitHub: raehik/redcarpet-shortlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;My shortlink renderer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the &lt;code&gt;link&lt;/code&gt; method I wrote must override all of the processing
originally done by the C HTML renderer, I&amp;rsquo;ve tried to make sure normal
links are formed identically (or at least correctly). So far I&amp;rsquo;m quite
sure my renderer hasn&amp;rsquo;t formed a bad link, but I&amp;rsquo;m not very sure about
HTML-escaping. If you find any bugs, please &lt;a href=&quot;!GitHub&quot; title=&quot;raehik/redcarpet-shortlink/issues&quot;&gt;create an
issue&lt;/a&gt; on the GitHub repo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: I tried to use shortlinks as much as possible in this post.
&lt;a href=&quot;!GitHub&quot; title=&quot;raehik/raehik.me/blob/master/_posts/2015-02-12-writing-a-custom-redcarpet-renderer.md&quot;&gt;Read the source&lt;/a&gt; if you&amp;rsquo;d like to see all the occurences.)&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate>
        <link>raehik.github.io/2015/02/12/writing-a-custom-redcarpet-renderer/</link>
        <guid isPermaLink="true">raehik.github.io/2015/02/12/writing-a-custom-redcarpet-renderer/</guid>
        
        
      </item>
    
      <item>
        <title>More personal tracking: Last.fm</title>
        <description>&lt;p&gt;In my quest for further methods of &lt;a href=&quot;/2014/10/08/things-that-are-cool-analysing-your-life/&quot;&gt;logging things I do&lt;/a&gt;, I came
across &lt;a href=&quot;http://www.last.fm&quot;&gt;Last.fm&lt;/a&gt; a couple months ago, and I have
some (good) things to say about it. &lt;/p&gt;

&lt;p&gt;Last.fm is a big ol&amp;rsquo; music database (not as elaborate as
&lt;a href=&quot;http://musicbrainz.org&quot;&gt;MusicBrainz&lt;/a&gt; with a killer feature: being able
to make a log of every track you listen to. The verb used for this is
&lt;em&gt;scrobbling&lt;/em&gt;. A &lt;em&gt;scrobble&lt;/em&gt; is a message you send to Last.fm confirming
that you listened to a certain song at a certain time.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re averse to giving corporations &amp;lsquo;personal&amp;rsquo; (somewhat) data, you
can use a local scrobbler. There are a few Last.fm scrobblers around
which can keep a local log too. The main scrobbler I&amp;rsquo;m using,
&lt;a href=&quot;http://manpages.ubuntu.com/manpages/utopic/man1/mpdscribble.1.html&quot;&gt;mpdscribble&lt;/a&gt;, can record songs &lt;a href=&quot;http://www.musicpd.org/&quot;&gt;MPD&lt;/a&gt; plays
in a very simple log file as well as submitting to Last.fm and other
audioscrobblers, so there&amp;rsquo;s something to look at if you use MPD.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t mind Last.fm holding your data but like keeping backups of
your data, then you&amp;rsquo;re in luck. They provide a very nice - if rather
slow - &lt;a href=&quot;http://www.last.fm/settings/dataexporter&quot;&gt;data export service&lt;/a&gt;. About 3 days after I requested my
archive (only having accrued a measly &amp;lt;1000 scrobbles over the week I&amp;rsquo;d
had my account for), I received an email with a link which lasts only 7
days. Seems a bit stingy, but they kindly provide separate CSV and
JSON files, and timestamp using combined &lt;a href=&quot;!Wikipedia&quot;&gt;Unix times&lt;/a&gt; and
&lt;a href=&quot;!Wikipedia&quot;&gt;ISO time formats&lt;/a&gt; (?) which makes me feel warm inside :)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: The export feature seems to be recent, since the zip file your
data comes in includes a &lt;code&gt;readme.txt&lt;/code&gt; with only the contents &lt;code&gt;Fill me
out&lt;/code&gt;. They also mention on the export page that it&amp;rsquo;s experimental.
Hopefully it&amp;rsquo;ll be improved eventually!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For people looking to record information about the songs they listen to
and don&amp;rsquo;t mind sharing that data with a company who make their money off
using it, Last.fm gets a recommendation from me. It&amp;rsquo;s a simple service
and a cinch to set up with most music players, including &lt;a href=&quot;http://rockbox.org&quot;&gt;Rockbox&lt;/a&gt;-ed
portable players.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
        <link>raehik.github.io/2015/01/27/more-personal-tracking-lastfm/</link>
        <guid isPermaLink="true">raehik.github.io/2015/01/27/more-personal-tracking-lastfm/</guid>
        
        
      </item>
    
      <item>
        <title>vimwiki: Cool, but not enough Markdown</title>
        <description>&lt;p&gt;I&amp;rsquo;m having fun with &lt;a href=&quot;https://github.com/vimwiki/vimwiki&quot;&gt;vimwiki&lt;/a&gt; at the moment. It&amp;rsquo;s an interesting Vim
plugin which turns your editor into not only a wiki editor, but a viewer
as well. Here&amp;rsquo;s what I mean:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vimwiki-example.png&quot; alt=&quot;vimwiki example&quot;&gt;&lt;/p&gt;

&lt;p&gt;The coolest thing about vimwiki is its automatic line squashing. All
lines except the current one have their formatting syntax removed,
leaving just the text &amp;amp; formatting. Links are also squashed down into
just the link text, which is &lt;em&gt;really&lt;/em&gt; cool. I&amp;rsquo;ll admit I don&amp;rsquo;t like
those features all the time &amp;ndash; but it&amp;rsquo;s also pretty undeniably cool for
a Vim plugin.&lt;/p&gt;

&lt;p&gt;The other really nice features are the clever new file-making. By simply
hitting Enter on a word in normal mode (or on a selection in visual
mode) you make it a link to a corresponding wiki page. Hitting Enter on
a wiki link follows that link, then you can go back to the previous
file (and keep your cursor location!) by hitting Backspace.&lt;/p&gt;

&lt;p&gt;However, I feel it&amp;rsquo;s a little let down by its awkward syntax. vimwiki
comes with its own syntax by default which has some gripes and is just
dissimilar to Markdown enough that I don&amp;rsquo;t feel comfortable using it.
The Markdown support is subpar (even though many of the squashing
features still work partially) and by default overrides Vim&amp;rsquo;s Markdown
syntax highlighting, which works a lot better.&lt;/p&gt;

&lt;p&gt;I was quite amused when I found I could fix some of the Markdown issues
by literally &lt;code&gt;cat&lt;/code&gt;ing the normal Markdown syntax into vimwiki&amp;rsquo;s:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;cat /usr/share/vim/vim74/markdown.vim &amp;gt;&amp;gt; ~/.vim/syntax/vimwiki_markdown.vim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now headers look nice and links work a bit better.&lt;/p&gt;

&lt;p&gt;Overall vimwiki is a really fun plugin, but the time-saving features
could get on your nerves and the Markdown support (which I really want
to use so I&amp;rsquo;m not limited to vimwiki) isn&amp;rsquo;t perfect yet. You could just
work with a collection of normal Markdown files, and maybe a few
bindings to make new files easier.&lt;/p&gt;

&lt;p&gt;In my ideal world, I would write a much simpler plugin which only adds a
few features to Markdown files if they&amp;rsquo;re in a wiki path, and none of
that flashy collapse biz. Someday&amp;hellip;&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 11:14:36 +0000</pubDate>
        <link>raehik.github.io/2014/11/16/vimwiki-not-enough-markdown/</link>
        <guid isPermaLink="true">raehik.github.io/2014/11/16/vimwiki-not-enough-markdown/</guid>
        
        
      </item>
    
      <item>
        <title>Commandline master race</title>
        <description>&lt;p&gt;I&amp;rsquo;m almost finished moving all my major programs over to a
terminal-based equivalent! Just set up mutt with offlineimap to work
with my Gmail account and it seems pretty fun.&lt;/p&gt;

&lt;p&gt;My current list of interactive terminal apps in constant use includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://irssi.org&quot;&gt;irssi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://calcurse.org&quot;&gt;calcurse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org&quot;&gt;vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.musicpd.org&quot;&gt;mpd&lt;/a&gt; + &lt;a href=&quot;http://ncmpcpp.rybczak.net&quot;&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mutt.org&quot;&gt;mutt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I&amp;rsquo;m pretty set for when the graphical display rapture comes.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Oct 2014 00:14:41 +0100</pubDate>
        <link>raehik.github.io/2014/10/21/commandline-master-race/</link>
        <guid isPermaLink="true">raehik.github.io/2014/10/21/commandline-master-race/</guid>
        
        
      </item>
    
      <item>
        <title>Getting to grips with Rails</title>
        <description>&lt;p&gt;Rails is &lt;em&gt;scary&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When you type &lt;code&gt;rails new&lt;/code&gt;, lots of files with funny names appear. Things
like &lt;code&gt;Gemfile&lt;/code&gt;, &lt;code&gt;config.ru&lt;/code&gt; &lt;code&gt;vendor/&lt;/code&gt;, &lt;code&gt;bin&lt;/code&gt;&amp;hellip; It&amp;rsquo;s a little
overwhelming.&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t really factor in &amp;ldquo;learning Rails&amp;rdquo; into the time it would take
us to get something running in Setsura &amp;ndash; and that was a grave error,
considering we &lt;em&gt;finally made the project repo&lt;/em&gt; about 6 months after we
received the money. (It was everyone&amp;rsquo;s fault, we were all too lazy.)&lt;/p&gt;

&lt;p&gt;For now, I&amp;rsquo;m focusing on learning about Rails and other MVC-esque web
frameworks (Node.js is cool too), so I can understand how we should do
stuff. Luckily there are like a billion Rails tutorials, so I&amp;rsquo;ll bet we
can get some simple things running in a month!&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Oct 2014 13:37:38 +0100</pubDate>
        <link>raehik.github.io/2014/10/18/getting-to-grips-with-rails/</link>
        <guid isPermaLink="true">raehik.github.io/2014/10/18/getting-to-grips-with-rails/</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>setsura</category>
        
        
      </item>
    
      <item>
        <title>An introduction to Setsura</title>
        <description>&lt;p&gt;We&amp;rsquo;ve finally started work proper on the Setsura project. &lt;em&gt;It&amp;rsquo;s going to
be a challenge.&lt;/em&gt; I&amp;rsquo;m planning to write posts on the development process,
and talk about the problems we face and how we deal with them.&lt;/p&gt;

&lt;p&gt;The original design (before I joined the project) was written in PHP
with some nice accompanying Javascript and CSS. When I probed into what
things we might want this service to do, I suggested Ruby on Rails for a
number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we could code in a more structured manner&lt;/li&gt;
&lt;li&gt;developers seem to have gotten tired of PHP (I wouldn&amp;rsquo;t know, I&amp;rsquo;ve
never used it :P)&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s the framework for
&lt;a href=&quot;https://github.com/discourse/discourse&quot;&gt;Discourse&lt;/a&gt; and some other
things&lt;/li&gt;
&lt;li&gt;it&amp;rsquo;s the cool new thing to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big thing was that Discourse is built on Rails 3, and that meant
that if we did the project in Rails 3, everything would be a &lt;em&gt;lot&lt;/em&gt;
simpler (I think?). I later found that there is a decent image booru
software written in Rails 3,
&lt;a href=&quot;https://github.com/moebooru/moebooru&quot;&gt;moebooru&lt;/a&gt;, so that was even
better!&lt;/p&gt;

&lt;p&gt;Finally, with some of the integral design choices made, we begin!&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Oct 2014 23:48:00 +0100</pubDate>
        <link>raehik.github.io/2014/10/14/an-introduction-to-setsura/</link>
        <guid isPermaLink="true">raehik.github.io/2014/10/14/an-introduction-to-setsura/</guid>
        
        <category>setsura</category>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        
      </item>
    
      <item>
        <title>Record all X11 keystrokes</title>
        <description>&lt;p&gt;This was &lt;strong&gt;NOT&lt;/strong&gt; fun to do. For some reason, though implementing a
simple keylogger in Linux takes only a few lines, logging &lt;em&gt;complete&lt;/em&gt; and
&lt;em&gt;neat&lt;/em&gt; data turns out to be much harder than it should be, in my
opinion.&lt;/p&gt;

&lt;p&gt;Eventually, after searching and researching (and even trying to write my
own solution in C) I found a &lt;a href=&quot;http://unix.stackexchange.com/a/129171/45676&quot;&gt;Perl
solution&lt;/a&gt; Stéphane
Chazelas posted on Unix and Linux SE. It&amp;rsquo;s entirely unreadable &amp;ndash; but
hey, it works.&lt;/p&gt;

&lt;p&gt;I threw it up on my GitHub at &lt;a href=&quot;!GitHub&quot;&gt;raehik/xinput-keylog&lt;/a&gt; and made
some changes, mainly to do with altering the logging format &amp;amp; printing
to a file rather than &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The log format is&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;seconds.microseconds press/release xkeycode keyname modifiers
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where press = 1 &amp;amp; release = 0, for example&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;1413114050.181650 1 111 Up 
1413114050.266941 0 111 Up 
1413114051.148741 1 50 Shift_L 
1413114051.320743 1 38 a Shift
1413114051.567763 0 38 a Shift
1413114054.334834 1 37 Control_L Shift
1413114055.660402 1 40 d Shift,Control
1413114055.738983 0 40 d Shift,Control
1413114056.272003 0 50 Shift_L Shift,Control
1413114056.282852 0 37 Control_L Control
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s the log just for hitting &amp;ldquo;[Up]A[Ctrl-Shift-D]&amp;rdquo; &amp;ndash; very detailed.
I got to thinking that if I record to a precision higher than a second &amp;amp;
record button releases as well, I could analyse how I use the keyboard
extensively, maybe even find out which keys I &amp;lsquo;lag&amp;rsquo; on (i.e. release
only after pressing another button). Maybe someone could write a program
for that? I&amp;rsquo;m too lazy :P&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: I now only record to second precision and only keydowns &amp;amp;
repeats, because wow I stroke a lot of keys. You can still check it out
in all its Perly glory at &lt;a href=&quot;!GitHub&quot;&gt;raehik/xinput-keylog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Oct 2014 14:00:00 +0100</pubDate>
        <link>raehik.github.io/2014/10/12/record-all-x11-keystrokes/</link>
        <guid isPermaLink="true">raehik.github.io/2014/10/12/record-all-x11-keystrokes/</guid>
        
        <category>linux</category>
        
        <category>graphical</category>
        
        
      </item>
    
      <item>
        <title>Record additional full zsh history</title>
        <description>&lt;p&gt;I like to keep my shell history free of duplicates and limited size (so
I don&amp;rsquo;t have to manually rotate it). However, after reading &lt;a href=&quot;http://blog.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life&quot;&gt;that
Stephen Wolfram
post&lt;/a&gt;
from my &lt;a href=&quot;../../../../2014/10/08/things-that-are-cool-analysing-your-life&quot;&gt;last
post&lt;/a&gt;,
I&amp;rsquo;ve realised just how much I want to see my full command history: the
embarrassing misspellings, the endless lines of &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt;&amp;hellip; It&amp;rsquo;s a
neat idea, I want to be able to analyse how I use my computer(s).&lt;/p&gt;

&lt;p&gt;I did &lt;strong&gt;not&lt;/strong&gt; want to change how my actual shell history was stored,
since I didn&amp;rsquo;t have a problem with it. So somehow, I would have to store
all commands I type in a separate file, and preferably easily because I
am an incredibly lazy hacker. Hmm. (This is where &lt;code&gt;zsh&lt;/code&gt; comes in.)&lt;/p&gt;

&lt;p&gt;For those of you who use it, it should come as no surprise that &lt;code&gt;zsh&lt;/code&gt;
does indeed have a feature for this. &lt;code&gt;zsh&lt;/code&gt; has some special functions
you can define which are run on certain events. The &lt;code&gt;zshaddhistory&lt;/code&gt;
function is executed &lt;em&gt;&amp;ldquo;when a history line has been read interactively,
but before it is executed&amp;rdquo;&lt;/em&gt; according to its entry in &lt;code&gt;zshmisc&lt;/code&gt;. Any
time you write a command which &lt;code&gt;zsh&lt;/code&gt; can parse, this function will be
run, as long as you&amp;rsquo;ve defined it.&lt;/p&gt;

&lt;p&gt;So all we have to do is get &lt;code&gt;zshaddhistory&lt;/code&gt; to write the argument it
gets to a file. I&amp;rsquo;d also like to record the current date and time,
because I want to do more than simply count my commands. This is almost
&lt;em&gt;too easy&lt;/em&gt;. To your &lt;code&gt;.zshrc&lt;/code&gt;, add:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;zshaddhistory&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# prepend the current epoch time&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# $1 includes terminating newline already (see zshmisc(1))&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(date &amp;quot;&lt;/span&gt;+%s&lt;span class=&quot;s2&quot;&gt;&amp;quot;) $1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.zsh_full_history&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now every command you type is logged to &lt;code&gt;$HOME/.zsh_full_history&lt;/code&gt; along
with the exact time.&lt;/p&gt;

&lt;p&gt;I did come across a small problem with this simple approach: when
exiting with Ctrl-D, there is no newline present, but &lt;code&gt;zsh&lt;/code&gt; still calls
&lt;code&gt;zshaddhistory&lt;/code&gt; (with an empty argument). The exit line now looks
identical to an empty line, which I have rather a lot of in my command
history. To fix this, we can use another special &lt;code&gt;zsh&lt;/code&gt; function,
&lt;code&gt;zshexit&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# clean up the line when exiting with Ctrl-D                                    &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# if Ctrl-D is hit, there isn&amp;#39;t a terminating newline -- so we&amp;#39;ll add a  &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# useful message which probably won&amp;#39;t ever be written (! specifies an    &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# event, so it&amp;#39;ll only work surrounded in quotes                         &lt;/span&gt;
    zshexit&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                                                              
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!EXIT!&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.zsh_full_history&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add that to your &lt;code&gt;.zshrc&lt;/code&gt; too, and every time you exit the shell,
&lt;code&gt;!EXIT!&lt;/code&gt; will be added to your full history log. I chose that string
because it&amp;rsquo;s unlikely to ever be added to the history, since the &amp;rsquo;!&amp;rsquo;
will cause a parse error. If you ever exit the shell with the &lt;code&gt;exit&lt;/code&gt;
command, then you&amp;rsquo;ll get this line right after without a date before it.&lt;/p&gt;

&lt;p&gt;Some example history could be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;1413054363 ls
1413054364 exit
!EXIT!
1413054368 !EXIT!
1413054377 tail $HOME/.zsh_full_history
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that there were 2 exits there: the first done using the
&lt;code&gt;exit&lt;/code&gt; command, and the second 4 seconds after by Ctrl-D. Originally,
all that mattered to me was that Ctrl-D lines could be easily skipped
programatically &amp;ndash; but this also records the time at which you exit a
shell, which might be cool to look at.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2014-10-14 edit: I have found that occasionally &lt;code&gt;!EXIT!&lt;/code&gt; will **not&lt;/em&gt;*
have a date put before it &amp;gt;:( &amp;ndash; I fixed this by appending the date
after !EXIT! every time:*&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;zshexit&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;!EXIT! $(date &amp;quot;&lt;/span&gt;+%s&lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.zsh_full_history&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;This does mean that properly-formed exit lines have another date on
the end (usually the same, though rarely a second later), but that can
just be disregarded when looking at it. It at least means that *&lt;/em&gt;all**
exit lines have a date attached.*&lt;/p&gt;

&lt;p&gt;&amp;hellip; Now I feel it&amp;rsquo;s not complete, that I need to log when shells start
too. This is pretty simple, as you&amp;rsquo;d imagine: since &lt;code&gt;.zshrc&lt;/code&gt; is read by
interactive shells on startup, we add just one line to it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(date &amp;quot;&lt;/span&gt;+%s&lt;span class=&quot;s2&quot;&gt;&amp;quot;) !START!&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$HOME/.zsh_full_history&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s that! Now you can be safe in the knowledge that your shell
history is being logged, if that makes you feel safe for any reason.
Eventually I&amp;rsquo;ll write a program to parse and analyse the log to get some
nice figures.&lt;/p&gt;

&lt;p&gt;(The examples in this post are not identical to what is in my &lt;code&gt;.zshrc&lt;/code&gt;:
see
&lt;a href=&quot;https://github.com/raehik/dotfiles/blob/master/home/.zshrc&quot;&gt;raehik/dotfiles/home/.zshrc&lt;/a&gt;
for my full config.)&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Oct 2014 13:48:15 +0100</pubDate>
        <link>raehik.github.io/2014/10/12/record-additional-full-zsh-history/</link>
        <guid isPermaLink="true">raehik.github.io/2014/10/12/record-additional-full-zsh-history/</guid>
        
        
      </item>
    
  </channel>
</rss>
